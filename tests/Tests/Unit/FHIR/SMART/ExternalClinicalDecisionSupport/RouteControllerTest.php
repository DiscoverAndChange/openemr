<?php

namespace OpenEMR\Tests\Unit\FHIR\SMART\ExternalClinicalDecisionSupport;

use OpenEMR\Common\Auth\OpenIDConnect\Repositories\ClientRepository;
use OpenEMR\Common\Logging\SystemLogger;
use OpenEMR\FHIR\SMART\ActionUrlBuilder;
use OpenEMR\FHIR\SMART\ExternalClinicalDecisionSupport\RouteController;
use PHPUnit\Framework\TestCase;
use Symfony\Component\HttpFoundation\Request;
use Twig\Environment;

class RouteControllerTest extends TestCase
{
    protected RouteController $controller;
    protected ClientRepository $mockRepository;
    protected SystemLogger $mockLogger;

    protected Environment $mockTwig;

    protected ActionUrlBuilder $actionUrlBuilder;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->mockRepository = $this->createMock(ClientRepository::class);
        $this->mockLogger = $this->createMock(SystemLogger::class);
        $this->mockTwig = $this->createMock(Environment::class);
        $this->actionUrlBuilder = $this->createMock(ActionUrlBuilder::class);
        $this->controller = new RouteController($this->mockRepository, $this->mockLogger, $this->mockTwig, $this->actionUrlBuilder);
    }

    public function testSupportsRequest() {
        $request = new Request(['action' => 'external-cdr/']);
        $this->assertTrue($this->controller->supportsRequest($request));

        $request = new Request(['action' => 'external-cd/']);
        $this->assertFalse($this->controller->supportsRequest($request));

        $request = new Request(['action' => 'external-cdr']);
        $this->assertTrue($this->controller->supportsRequest($request));

        $request = new Request(['action' => 'external-cdr/1']);
        $this->assertTrue($this->controller->supportsRequest($request));

        $request = new Request(['action' => 'external-cdr/1/edit/']);
        $this->assertTrue($this->controller->supportsRequest($request));

        $request = new Request(['action' => 'external-cd/1']);
        $this->assertFalse($this->controller->supportsRequest($request));
    }

    public function testParseRequest() {
        $request = new Request(['action' => 'external-cdr/']);
        $result = $this->controller->parseRequest($request);
        $this->assertEquals('external-cdr', $result['mainAction']);
        $this->assertEmpty($result['mainActionChild']);
        $this->assertEmpty($result['subAction']);

        $request = new Request(['action' => 'external-cdr/list/']);
        $result = $this->controller->parseRequest($request);
        $this->assertEquals('external-cdr', $result['mainAction']);
        $this->assertEquals('list', $result['mainActionChild']);
        $this->assertEmpty($result['subAction']);

        $request = new Request(['action' => 'external-cdr/1/edit/']);
        $result = $this->controller->parseRequest($request);
        $this->assertEquals('external-cdr', $result['mainAction']);
        $this->assertEquals('1', $result['mainActionChild']);
        $this->assertEquals('edit', $result['subAction']);
    }

    public function testDispatch() {
        $request = new Request(['action' => 'external-cdr/']);
        $this->assertTrue($this->controller->supportsRequest($request));
        $response = $this->controller->dispatch($request);
        $this->assertEquals(200, $response->getStatusCode());
    }

    public function testListAction() {
        // smoke test
        $request = new Request(['action' => 'external-cdr/list/']);
        $this->assertTrue($this->controller->supportsRequest($request), "Request should be supported");
        $response = $this->controller->dispatch($request);
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertMatchesRegularExpression('/External Clinical Decision Support/', $response->getContent());
    }
}
